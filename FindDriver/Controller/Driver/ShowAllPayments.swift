//
//  MakeAPaymentTVC.swift
//  FindDriver
//
//  Created by Miad Azarmehr on 2019-04-07.
//  Copyright Â© 2019 Miad Azarmehr. All rights reserved.
//

import UIKit
import Firebase

class ShowAllPayments: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    
    @IBOutlet var tableView: UITableView!
    
    var currentLoggedInUser = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        currentLoggedInUser = Auth.auth().currentUser!.uid
        
        tableView.dataSource = self
        tableView.delegate = self
        
        tableView.register(UINib(nibName: "MessageCell", bundle: nil) , forCellReuseIdentifier: "customMessageCell")
        
        configureTableView()
        retrieveDriverInfo()
        retrieveVehicles()
        retrievePayments()
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        tableView.reloadData()
    }
    
    
    @IBAction func logOutButton(_ sender: UIBarButtonItem) {
        do{
            try Auth.auth().signOut()
        } catch let logoutError {
            print (logoutError)
        }
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let sigInVC = storyboard.instantiateViewController(withIdentifier: "LoginViewController")
        self.present(sigInVC, animated: true, completion: nil)
        driverInstance = Driver()
        vehicleArray = [Vehicle]()
        requestedVehiclesArray = [Vehicle]()
        paymentArray = [Payment]()
        ownersArray = [Owner]()
        vehicleIndex = 0
        requestedIndex = 0
        paymentIndex = 0
        ownerIndex = 0
    }
    
    func configureTableView() {
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 120.0
    }
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "customMessageCell", for: indexPath) as! CustomMessageCell
        
        cell.vehicleDetailLabel.text = "\(paymentArray[indexPath.row].startDate) To: \(paymentArray[indexPath.row].endDate) \(paymentArray[indexPath.row].amount) paid. "
        
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        print ("vehiclecount -------> \(vehicleArray.count)")
        return paymentArray.count
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        paymentIndex = indexPath.row
        performSegue(withIdentifier: "goToPaymentDetails", sender: self)
    }
    
    
    @IBAction func unwindToFindVehicleForRent(_ unwindSegue: UIStoryboardSegue) {
        
    }
    
    
    func retrieveVehicles() {
        let ref = Database.database().reference().child("vehicles")
        let query = ref.queryOrdered(byChild: "ownerID")
        query.observe(.childAdded) { (snapshot) in
            
            if let dictionary = snapshot.value as? [String: Any] {
                
                let vehiclesRetrived = dictionary
                print("DriverFindAvailableVehicleTableViewController \(vehiclesRetrived)")
                
                let vehicleAutoGeneratedKey = snapshot.key
                print("vehiclesAutoGeneratedKey \(vehicleAutoGeneratedKey)")
                let driverVehicles = Vehicle()
                
                let availability = dictionary["availability"] as? Bool
                let brand = dictionary["brand"] as? String
                let model = dictionary["model"] as? String
                let ownerID = dictionary["ownerID"] as? String
                let type = dictionary["type"] as? String
                let weeklyRent = dictionary["weeklyRent"] as? String
                let year = dictionary["year"] as? String
                let requestAccepted = dictionary["requestAccepted"] as? Bool
                let driverID = dictionary["driverID"] as? String
                let vehicleRequested = dictionary["vehicleRequested"] as? Bool
                
                driverVehicles.availability = availability ?? true
                driverVehicles.brand = brand ?? ""
                driverVehicles.model = model ?? ""
                driverVehicles.ownerID = ownerID ?? ""
                driverVehicles.type = type ?? ""
                driverVehicles.weeklyRent = weeklyRent ?? ""
                driverVehicles.year = year ?? ""
                driverVehicles.requestAccepted = requestAccepted ?? false
                driverVehicles.driverID = driverID ?? ""
                driverVehicles.vehicleAutoGeneratedKey = vehicleAutoGeneratedKey
                driverVehicles.vehicleRequested = vehicleRequested ?? false
                
                
                if driverInstance.connectedToAnyVehicles == true && driverID == self.currentLoggedInUser
                {
                    vehicleArray.append(driverVehicles)
                } else if driverInstance.connectedToAnyVehicles == false {
                    vehicleArray.append(driverVehicles)
                }
                self.tableView.reloadData()
            }
        }
    }
    
    
    func retrievePayments() {
        let ref = Database.database().reference().child("payments")
        let query = ref.queryOrdered(byChild: "driverID").queryEqual(toValue: currentLoggedInUser)
        query.observe(.childAdded) { (snapshot) in
            
            if let dictionary = snapshot.value as? [String: Any] {

                let allPayments = Payment()
                
                let amount = dictionary["amount"] as? String
                let driverAutoGenerateKey = dictionary["driverAutoGenerateKey"] as? String
                let driverID = dictionary["driverID"] as? String
                let endDate = dictionary["endDate"] as? String
                let ownerID = dictionary["ownerID"] as? String
                let paymentConfirmed = dictionary["paymentConfirmed"] as? Bool
                let startDate = dictionary["startDate"] as? String
                let vehicleAutoGeneratedKey = dictionary["vehicleAutoGeneratedKey"] as? String
                
                allPayments.amount = amount ?? ""
                allPayments.driverAutoGenerateKey = driverAutoGenerateKey ?? ""
                allPayments.driverID = driverID ?? ""
                allPayments.endDate = endDate ?? ""
                allPayments.ownerID = ownerID ?? ""
                allPayments.paymentConfirmed = paymentConfirmed ?? false
                allPayments.startDate = startDate ?? ""
                allPayments.vehicleAutoGeneratedKey = vehicleAutoGeneratedKey ?? ""
                
                paymentArray.append(allPayments)
                self.configureTableView()
                
            }
        }
        
        //        let ref = Database.database().reference().child("payments")
        //        let query = ref.queryOrdered(byChild: "driverID").queryEqual(toValue: currentLoggedInUser)
        //        query.observe(.value, with: { (snapshot) in
        //
        //            for snaps in snapshot.children.allObjects as! [DataSnapshot] {
        //
        //                let paymentsRetrived = snaps.value!
        //                print("Here in PAYMENTS \(paymentsRetrived)")
        //
        //                let dictionary = snaps.value as? NSDictionary
        //                let allPayments = Payment()
        //
        //                let amount = dictionary?["amount"] as? String
        //                let driverAutoGenerateKey = dictionary?["driverAutoGenerateKey"] as? String
        //                let driverID = dictionary?["driverID"] as? String
        //                let endDate = dictionary?["endDate"] as? String
        //                let ownerID = dictionary?["ownerID"] as? String
        //                let paymentConfirmed = dictionary?["paymentConfirmed"] as? Bool
        //                let startDate = dictionary?["startDate"] as? String
        //                let vehicleAutoGeneratedKey = dictionary?["vehicleAutoGeneratedKey"] as? String
        //
        //                allPayments.amount = amount ?? ""
        //                allPayments.driverAutoGenerateKey = driverAutoGenerateKey ?? ""
        //                allPayments.driverID = driverID ?? ""
        //                allPayments.endDate = endDate ?? ""
        //                allPayments.ownerID = ownerID ?? ""
        //                allPayments.paymentConfirmed = paymentConfirmed ?? false
        //                allPayments.startDate = startDate ?? ""
        //                allPayments.vehicleAutoGeneratedKey = vehicleAutoGeneratedKey ?? ""
        //
        //                paymentArray.append(allPayments)
        //                self.configureTableView()
        //            }
        //        })
    }
    
    func retrieveDriverInfo() {
        
        let currentLoggedInUserID = Auth.auth().currentUser?.uid
        let ref = Database.database().reference().child("profiles")
        let query = ref.queryOrdered(byChild: "driverID").queryEqual(toValue: currentLoggedInUserID)
        query.observe(.value, with: { (snapshot) in
            for snaps in snapshot.children.allObjects as! [DataSnapshot] {
                
                let dictionary = snaps.value as? NSDictionary
                
                let phone = dictionary?["phone"] as? String
                let driverID = dictionary?["driverID"] as? String
                let firstName = dictionary?["firstName"] as? String
                let lastName = dictionary?["lastName"] as? String
                let ownerID = dictionary?["ownerID"] as? String
                let vehicleAutoGeneratedKey = dictionary?["vehicleAutoGeneratedKey"] as? String
                let connectedToAnyVehicles = dictionary?["connectedToAnyVehicles"] as? Bool
                let driversAutoGeneratedKey = snaps.key
                
                driverInstance.phone = phone ?? ""
                driverInstance.driverID = driverID ?? ""
                driverInstance.firstName = firstName ?? ""
                driverInstance.lastName = lastName ?? ""
                driverInstance.ownerID = ownerID ?? ""
                driverInstance.connectedToAnyVehicles = connectedToAnyVehicles ?? false
                driverInstance.vehicleAutoGeneratedKey = vehicleAutoGeneratedKey ?? ""
                driverInstance.driverAutoGenerateKey = driversAutoGeneratedKey
                
                
                print("DRIVERPHONE \(phone ?? "")")
                print("DRIVERID \(driverID ?? "")")
                print("driverInstance.connectedToAnyVehicles \(driverInstance.connectedToAnyVehicles)")
                print("Auth.auth().currentUser?.uid \(self.currentLoggedInUser)")
            }
        })
    }
}

